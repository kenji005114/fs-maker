import type { PlasmoCSConfig } from 'plasmo';

import { sendToBackground } from '@plasmohq/messaging';
import { Storage } from '@plasmohq/storage';

import { ExtensionStorage } from './core';
import { addFurigana } from './furiganaMaker';

export const config: PlasmoCSConfig = {
  matches: ['https://*/*'],
};

// The content script generated by plasmo is a nested IIFE, and Top-level await cannot be used.
(async function mark() {
  const storage = new Storage({ area: 'local' });
  const extensionIsEnabled: boolean = await storage.get(ExtensionStorage.AutoMode);
  if (!extensionIsEnabled) {
    /* If the user does not enable the extension, the extension will not attempt to add furigana to the page.
    The page must be refreshed after switching the extension to the enabled state. */
    return;
  }

  const response = await sendToBackground<{ domain: string }, { selector: string }>({
    name: 'getSelector',
    body: { domain: location.hostname },
  });

  if (response.selector) {
    // Observer will not observe the element that is loaded for the first time on the page,
    // so it needs to execute `addFurigana` once immediately.
    const elements = Array.from(document.querySelectorAll(response.selector));
    await addFurigana(...elements);

    const observer = new MutationObserver((records) => {
      const japaneseElements = records
        .flatMap((record) => Array.from(record.addedNodes))
        .filter((node) => node.nodeType === Node.ELEMENT_NODE)
        .flatMap((node) => Array.from((node as Element).querySelectorAll(response.selector)));

      addFurigana(...japaneseElements);
    });

    observer.observe(document.body, { childList: true, subtree: true });
  }
})();
