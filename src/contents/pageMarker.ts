import type { PlasmoCSConfig } from 'plasmo'

import { sendToBackground } from '@plasmohq/messaging'

import { addFurigana } from './furiganaMaker'

export const config: PlasmoCSConfig = {
  matches: ['https://*/*']
}

const mark = async () => {
  const response = await sendToBackground<{ domain: string }, { selector: string }>({
    name: 'getSelector',
    body: { domain: location.hostname }
  })

  if (response.selector) {
    // Observer will not observe the element that is loaded for the first time on the page,
    // so it needs to execute `addFurigana` once immediately.
    const elements = Array.from(document.querySelectorAll(response.selector))
    addFurigana(elements)

    const observer = new MutationObserver((records) => {
      const japaneseElements = records
        .flatMap((record) => Array.from(record.addedNodes))
        .filter((node) => node.nodeType === Node.ELEMENT_NODE)
        .flatMap((node) => Array.from((node as Element).querySelectorAll(response.selector)))

      addFurigana(japaneseElements)
    })

    observer.observe(document.body, { childList: true, subtree: true })
  }
}

// The content script generated by plasmo is a nested IIFE, and Top-level await cannot be used.
mark()
